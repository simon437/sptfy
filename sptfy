#!/bin/bash

# author: Simon Olfs
# lisence: AGPLv3
# change-log: 30.04.2023 Simon Olfs: Version 0.1 created

root="/home/simon/prog/sptfy"           # root for of the programm
source $root/controler/var.sh           # Import variables controler
source $root/controler/help.sh          # Import help controler
source $root/controler/logging.sh       # Import logging controler
source $root/controler/authorization.sh # Import o-auth 2.0 controler
source $root/controler/devices.sh       # Import device controler
source $root/webAPI/player.sh           # Import web-api player functions
source $root/webAPI/search.sh           # Import web-api search functions
source $root/webAPI/tracks.sh

# checks and handles the passed arguments
validate_arguments() {
    if [ $# -gt 1 ]; then
        event_handler USAGE $LINENO "Invalid arguments: $@"
    fi

    argument=$1                         # argument to handle
    if [ $argument == "next" ]; then
        skipToNext || exit $EXIT_GENERAL_ERROR
        displayCurrentPlay "Next track"
        exit $EXIT_OK
    fi

    if [ $argument == "prev" ]; then
        skipToPrev || exit $EXIT_GENERAL_ERROR
        displayCurrentPlay "Previous track"
        exit $EXIT_OK
    fi

    if [ $argument == "pause" ]; then
        pausePlayback || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi

    if [ $argument == "resume" ]; then
        resumePlayback || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    if [ $argument == "up" ]; then
        setPlaybackVolume "up"
        exit $EXIT_OK
    fi

    if [ $argument == "down" ]; then
        setPlaybackVolume "down"
        exit $EXIT_OK
    fi

    event_handler USAGE $LINENO "Invalid argument: $argument"
}

# validates the passed options
validate_options_or_exit() {
    while getopts :hvd:p:i:r:f opt
    do
        case $opt in
            h) opt_h=1 ;;
            v) opt_v=1 ;;
            f) opt_f=1 ;;
            d) opt_d=1; opt_d_val=$OPTARG ;;
            p) opt_p=1; opt_p_val=$OPTARG ;;
            i) opt_i=1; opt_i_val=$OPTARG ;;
            r) opt_r=1; opt_r_val=$OPTARG ;;
            :) case $OPTARG in 
                    d) opt_d=1; continue ;;
                    p) opt_p=1; continue ;;
                    i) opt_i=1; continue ;;
                    r) opt_r=1; continue ;;
                    *) event_handler USAGE $LINENO \ 
                        "Missing argument for option '-$OPTARG'" ;;
                esac ;;
           \?) event_handler USAGE $LINENO "Invalid option $OPTARG" ;;
            *) event_handler ERROR $LINENO \ 
                "Internal error, Line: $LINENO" $EXIT_INTERNAL_ERROR ;;
        esac
    done
}

main() {
    validate_options_or_exit "$@"
    shift $((OPTIND - 1))

    # -h help
    if [ $opt_h -eq 1 ]; then 
        usage || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    # -v version
    if [ $opt_v -eq 1 ]; then 
        version || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    # -d devices
    if [ $opt_d -eq 1 ]; then 
        listDevices || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    # From here on an active device is needed. The previous options do not need 
    # an active device.
    status=$(initializeDevice)
    if [ $status -gt 0 ]; then
        exit $EXIT_GENERAL_ERROR
    fi

    # -p play
    if [ $opt_p -eq 1 ]; then 
        startPlayback $(search playlist "$opt_p_val") || 
            exit $EXIT_GENERAL_ERROR
        displayCurrentPlay "Play: $opt_p_val"
        exit $EXIT_OK
    fi
    
    # -f favorites
    if [ $opt_f -eq 1 ]; then
        local response=$(getCurrentlyPlayingObject)
        local id=$(echo $response | jq -r '.item.id')
        saveTrackToFavorites $id
        exit $EXIT_OK
    fi

    # -i information
    if [ $opt_i -eq 1 ]; then
        if [ -n "$opt_i_val" ] && [ "$opt_i_val" != "play" ] && [ "$opt_i_val" != "song" ]; then 
            event_handler USAGE $LINENO "Invalid option -i $opt_i_val"
        fi
        
        if [ "$opt_i_val" == "play" ]; then
            displayCurrentPlay "Current song"
        fi

        if [ "$opt_i_val" == "song" ]; then
            displayInfoTrack
        fi

        exit $EXIT_OK
    fi

    # -r recommendations
    if [ $opt_r -eq 1 ]; then
        if [ $# -gt 0 ]; then
            if [ "$1" == "custom" ]; then # display features to user to configure
                displayCurrentPlay "Current song"

                local track=$(getTrackFeatures)
                local output=""
                output+=`printf "%s" "Configure the recommendation parameters as follows"`
                output+=`printf "\n\n%-6s%-15s%-s" ""  "<id>=<value>"  "set the value of a parameter"`
                output+=`printf "\n%-6s%-15s%-s"   ""  "<id>=#"        "disable a parameter"`
                output+=`printf "\n%-6s%-15s%-s"   ""  "!"             "get the recommendations"`
                output+=`printf "\n\n%-s%-30s" "Track:" "\t$(echo $track | jq -r '.track.track_name'), \n\t$(echo $track | jq -r '.track.artists_name')"`
                echo -e "$output"

                local response=""
                while [[ $response != \! ]]; do 
                    local output=""
                    output+=`printf "\n\n%-5s%-20s%-15s%-20s" "ID" "PROPERTY" "VALUE" "RANGE"`
                    output+=`printf "\n%-50s" "----------------------------------------------------------------------"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "1"  "popularity"   "$(echo $track | jq -r '.track.target_popularity')" "0-100"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "2"  "danceability" "$(echo $track | jq -r '.track.target_danceability')" "0-1"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "3"  "energy" "$(echo $track | jq -r '.track.target_energy')" "0-1"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "4"  "speechiness" "$(echo $track | jq -r '.track.target_speechiness')" "0-1"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "5"  "instrumentalness" "$(echo $track | jq -r '.track.target_instrumentalness')" "0-1"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "6"  "liveness" "$(echo $track | jq -r '.track.target_liveness')" "0-1"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "7"  "valence" "$(echo $track | jq -r '.track.target_valence')" "0-1"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "8"  "tempo" "$(echo $track | jq -r '.track.target_tempo')" "BPM"`
                    output+=`printf "\n%-5s%-20s%-15s%-20s" "9"  "limit" "$(echo $track | jq -r '.track.limit')" "0-100"`
                    echo -e "$output"
                    read -p "" response


                    local id=$(echo $response | sed -E 's/=.*//')
                    local val=$(echo $response | sed -E 's/^.*=//')

                    case $id in 
                        1) track=$(echo $track | jq ".track.target_popularity = \"$val\"") ;;
                        2) track=$(echo $track | jq ".track.target_danceability = \"$val\"") ;;
                        3) track=$(echo $track | jq ".track.target_energy = \"$val\"") ;;
                        4) track=$(echo $track | jq ".track.target_speechiness = \"$val\"") ;;
                        5) track=$(echo $track | jq ".track.target_instrumentalness = \"$val\"") ;;
                        6) track=$(echo $track | jq ".track.target_liveness = \"$val\"") ;;
                        7) track=$(echo $track | jq ".track.target_valence = \"$val\"") ;;
                        8) track=$(echo $track | jq ".track.target_tempo = \"$val\"") ;;
                        9) track=$(echo $track | jq ".track.limit = \"$val\"") ;;
                        *)
                    esac

                    if [ $response != \! ]; then
                        echo -en "\033[1A\033[K\033[13A"
                    fi
                done

                # remove not needed key value pairs
                track=$(echo $track | jq 'del(.track.track_name)')
                track=$(echo $track | jq 'del(.track.artists_name)')

                local recommendations=$(getRecommendationsByFeatures "$track")
                for num in $(seq 0 $(echo $track | jq -r '.track.limit')); do
                    local track_uri=$(echo $recommendations | jq -r ".tracks[$num].uri")
                    addToQueue $track_uri
                done

                ## Feedback for user needs to be displayed. Possible: Config for recommendation + list of songs added to the queue
                exit $EXIT_OK
            fi

            if [[ $1 =~ ^[0-9]+$ ]]; then # recommendation based on the current song
                local recommendations=$(getRecommendationsByCurrentTrack)
                local length=$(echo $recommendations | jq '.tracks | length')
                local number_of_recommendations=1
                if [[ $# -gt 0 ]]; then
                    if [[ $@ =~ ^[1-9]?$|^1[0-9]$|20 ]]; then
                        number_of_recommendations=$@
                    fi
                fi

                for num in $(seq 0 $length | shuf | head -n $number_of_recommendations); do
                    local track_uri=$(echo $recommendations | jq -r ".tracks[$num].uri")
                    addToQueue $track_uri
                done
            fi
        fi
        exit $EXIT_OK
    fi

    # handle arguments
    if [ $# -gt 0 ]; then
        validate_arguments "$@"
        exit $EXIT_OK
    fi

    # no options or arguments are passed
    status=$(getPlaybackState)
    if [ $status == 0 ]; then
        pausePlayback
    else
        resumePlayback
        displayCurrentPlay "Resume to"
    fi
}

main "$@"
