#!/bin/bash

# author: Simon Olfs
# lisence: AGPLv3
# change-log: 30.04.2023 Simon Olfs: Version 0.1 created

root="/home/simon/prog/sptfy"           # root for of the programm
source $root/controler/var.sh           # Import variables controler
source $root/controler/help.sh          # Import help controler
source $root/controler/logging.sh       # Import logging controler
source $root/controler/authorization.sh # Import o-auth 2.0 controler
source $root/controler/devices.sh       # Import device controler
source $root/webAPI/player.sh           # Import web-api player functions
source $root/webAPI/search.sh           # Import web-api search functions

# checks and handles the passed arguments
validate_arguments() {
    if [ $# -gt 1 ]; then
        event_handler USAGE $LINENO "Invalid arguments: $@"
    fi

    argument=$1                         # argument to handle
    #if [ $argument == "init" ]; then
        #init 
        #exit $EXIT_OK
    #fi

    event_handler USAGE $LINENO "Invalid argument: $argument"
}

# validates the passed options
validate_options_or_exit() {
    local opt opt_count=0
    while getopts :hvd:p:n opt
    do
        (( opt_count++ ))
        case $opt in
            h) opt_h=1; (( opt_count-- )) ;;
            v) opt_v=1; (( opt_count-- )) ;;
            n) opt_n=1; (( opt_count-- )) ;;
            d) opt_d=1; opt_d_val=$OPTARG ;;
            p) opt_p=1; opt_p_val=$OPTARG ;;
            :) case $OPTARG in 
                    d) opt_d=1; continue ;;
                    p) opt_p=1; continue ;;
                    *) event_handler USAGE $LINENO \ 
                        "Missing argument for option '-$OPTARG'" ;;
                esac ;;
           \?) event_handler USAGE $LINENO "Invalid option $OPTARG" ;;
            *) event_handler ERROR $LINENO \ 
                "Internal error, Line: $LINENO" $EXIT_INTERNAL_ERROR ;;
        esac
    done
}

main() {
    validate_options_or_exit "$@"
    shift $((OPTIND - 1))

    # -h help
    if [ $opt_h -eq 1 ]; then 
        usage || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    # -v version
    if [ $opt_v -eq 1 ]; then 
        version || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    # -d devices
    if [ $opt_d -eq 1 ]; then 
        listDevices || exit $EXIT_GENERAL_ERROR
        exit $EXIT_OK
    fi
    
    # From here on an active device is needed. The previous options do not need 
    # an active device.
    status=$(initializeDevice)
    if [ $status -gt 0 ]; then
        exit $EXIT_GENERAL_ERROR
    fi

    # -p play
    if [ $opt_p -eq 1 ]; then 
        startPlayback $(search playlist "$opt_p_val") || 
            exit $EXIT_GENERAL_ERROR
        displayCurrentTrack
        exit $EXIT_OK
    fi

    # -n next
    if [ $opt_n -eq 1 ]; then
        skipToNext || exit $EXIT_GENERAL_ERROR
        displayCurrentTrack
        exit $EXIT_OK
    fi

    # handle arguments
    if [ $# -gt 0 ]; then
        validate_arguments "$@"
        exit $EXIT_OK
    fi

    # no options or arguments are passed
    status=$(getPlaybackState)
    if [ $status == 0 ]; then
        pausePlayback
    else
        resumePlayback
        displayCurrentTrack
    fi
}

main "$@"
